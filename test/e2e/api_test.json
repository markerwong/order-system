{
	"variables": [],
	"info": {
		"name": "order-system API test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get order list before place order test case",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response code should be 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"    const orders = pm.response.json();",
							"    pm.environment.set(\"orderNumber\", orders.length);",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {},
				"url": {
					"raw": "http://localhost:8080/order/?page=1&limit=5",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"order",
						""
					],
					"query": [
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "limit",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Place order with correct input",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response code should be 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"pm.test(\"Response data should contain id, distance and status\", function () {",
							"    const body = pm.response.json();",
							"    pm.expect(body.id).to.be.not.null;",
							"    pm.expect(body.distance).to.be.not.null;",
							"    pm.expect(body.status).to.equal('UNASSIGN');",
							"    pm.environment.set(\"id\", body.id);",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"origin\": [\"22.325378\", \"114.1739119\"],\n    \"destination\": [\"22.306242\", \"114.1639127\"]\n}"
				},
				"url": {
					"raw": "http://localhost:8080/order",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"order"
					]
				}
			},
			"response": []
		},
		{
			"name": "Place order with invalid input",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response code should be 500\", function () {",
							"    pm.expect(pm.response.code).to.equal(500);",
							"});",
							"pm.test(\"Response error equal `ERROR_DESCRIPTION`\", function () {",
							"    const body = pm.response.json();",
							"    pm.expect(body.error).to.equal('ERROR_DESCRIPTION');",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"origin\": [\"ABC\", \"114.1739119\"],\n    \"destination\": [\"22.306242\", \"114.1639127\"]\n}"
				},
				"url": {
					"raw": "http://localhost:8080/order",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"order"
					]
				}
			},
			"response": []
		},
		{
			"name": "Take order with id created by above test case",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response code should be 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"pm.test(\"Response status should be `SUCCESS`\", function () {",
							"    const body = pm.response.json();",
							"    pm.expect(body.status).to.equal('SUCCESS');",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"status\": \"taken\"\n}"
				},
				"url": {
					"raw": "http://localhost:8080/order/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"order",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Take order with fake id",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response code should be 409\", function () {",
							"    pm.expect(pm.response.code).to.equal(409);",
							"});",
							"pm.test(\"Response error equal `ORDER_ALREADY_BEEN_TAKEN`\", function () {",
							"    const body = pm.response.json();",
							"    pm.expect(body.error).to.equal('ORDER_ALREADY_BEEN_TAKEN');",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"status\": \"taken\"\n}"
				},
				"url": {
					"raw": "http://localhost:8080/order/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"order",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get order list after place order test case",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response code should be 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"pm.test(\"Response order list should contain one or more order\", function () {",
							"    const orderNumber = pm.environment.get(\"orderNumber\");",
							"    const orders = pm.response.json();",
							"    pm.expect(orders.length >= 1).to.be.true;",
							"    pm.expect(orders.length - orderNumber).to.equal(1);",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {},
				"url": {
					"raw": "http://localhost:8080/order/?page=1&limit=5",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"order",
						""
					],
					"query": [
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "limit",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		}
	]
}